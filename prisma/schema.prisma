generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

enum LeadSource {
  WEBSITE
  REFERRAL
  COLD_CALL
  EMAIL_CAMPAIGN
  SOCIAL_MEDIA
  EVENT
  OTHER
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  name          String
  email         String   @unique
  emailVerified Boolean
  image         String?
  role          UserRole @default(USER)

  sessions Session[]
  accounts Account[]

  Task       Task[]
  TaskColumn TaskColumn[]

  Funnel Funnel[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model TaskColumn {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  order Int
  color String @default("#e2e8f0")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  task Task[]

  @@map("task_columns")
}

model Task {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  order       Int
  dueDate     DateTime?
  priority    TaskPriority @default(MEDIUM)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  taskColumnId String
  task_column  TaskColumn @relation(fields: [taskColumnId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model FunnelColumn {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  order Int
  color String @default("#e2e8f0") // Default color (slate-200)

  leads Lead[]

  funnelId String
  funnel   Funnel @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@map("funnel_columns")
}

model Funnel {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  isDefault   Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  columns FunnelColumn[]
  Lead    Lead[]

  @@map("funnels")
}

model Lead {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Informações básicas do lead
  name     String
  email    String?
  phone    String?
  company  String?
  position String?

  // Informações de negócio
  value  Float
  source LeadSource @default(OTHER)
  status LeadStatus @default(NEW)

  // Informações adicionais
  description   String?
  tags          String?
  lastContact   DateTime?
  expectedClose DateTime?
  order         Int       @default(0)

  funnelId String
  funnel   Funnel @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  funnelColumnId String
  funnelColumn   FunnelColumn @relation(fields: [funnelColumnId], references: [id], onDelete: Cascade)

  @@map("leads")
}
